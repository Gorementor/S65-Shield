<html>
<head>
  <title>S65-Shield for Arduino</title>
</head>
<body>
<h1>S65-Shield for Arduino</h1>
<ul>
  <li>Further infos: <a href="readme.txt">readme.txt</a></li>
  <li>License: <a href="license.txt">license.txt</a></li>
</ul>
<br>
French description and additional functions: <a href="http://www.mon-club-elec.fr/pmwiki_reference_arduino/pmwiki.php?n=Main.LibrairieS65Shield">Librairie S65-Shield</a><br>


<br><hr>


<h2>Libraries</h2>
<blockquote>

<h3><u>S65Display</u></h3>
<pre>
<b>void init(uint8_t clock_div)</b>
Initialize the microcontroller peripherals and the display.
  clock_div - SPI clock divider (2, 4, 8, 16, 32),  SPI clock = Main clock / clock_div

<b>void setCursor(uint8_t x, uint8_t y)</b>
Set cursor.
  x         - X postion
  y         - Y postion
  
<b>void setArea(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)</b>
Set draw area.
  x0        - X postion of 1st point (left top)
  y0        - Y postion of 1st point (left top)
  x1        - X postion of 2nd point (right bottom)
  y1        - Y postion of 2nd point (right bottom)
  
<b>void drawStart(void)</b>
Start drawing.

<b>void draw(uint16_t color)</b>
Draw color.

<b>void drawStop(void)</b>
Stop drawing.

<b>void clear(uint16_t color)</b>
Clear the complete screen. 
  color     - screen color

<b>void drawPixel(uint8_t x0, uint8_t y0, uint16_t color)</b>
Draw a pixel.
  x0        - X postion of the pixel
  y0        - Y postion of the pixel
  color     - Color

<b>void drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint16_t color)</b>
Draw a line.
  x0        - X postion of 1st point
  y0        - Y postion of 1st point
  x1        - X postion of 2nd point
  y1        - Y postion of 2nd point
  color     - Color

<b>void drawRect(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint16_t color)</b>
Draw a rectangle edge.
  x0        - X postion of 1st point
  y0        - Y postion of 1st point
  x1        - X postion of 2nd point
  y1        - Y postion of 2nd point
  color     - Color
  
<b>void fillRect(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint16_t color)</b>
Draw a filled rectangle.
  x0        - X postion of 1st point
  y0        - Y postion of 1st point
  x1        - X postion of 2nd point
  y1        - Y postion of 2nd point
  color     - Color
  
<b>void drawCircle(uint8_t x0, uint8_t y0, uint8_t radius, uint16_t color)</b>
Draw a circle.
  x0        - X postion of middle point
  y0        - Y postion of middle point
  radius    - Radius
  color     - Color

<b>void fillCircle(uint8_t x0, uint8_t y0, uint8_t radius, uint16_t color)</b>
Draw a filled circle.
  x0        - X postion of middle point
  y0        - Y postion of middle point
  radius    - Radius
  color     - Color

<b>void drawChar(uint8_t x, uint8_t y, char c, uint8_t size, uint16_t color, uint16_t bg_color)</b>
Draw a single character from RAM.
  x         - X postion (left top)
  y         - Y postion (left top)
  c         - Character (RAM)
  size      - Font size scale-up (1=normal size, 2=double size...)
  color     - Font color
  bg_color  - Background color

<b>uint8_t drawText(uint8_t x, uint8_t y, char *s, uint8_t size, uint16_t color, uint16_t bg_color)</b>
Draw a string from RAM. The return value is the X end postion of the text.

  x         - X postion (left top)
  y         - Y postion (left top)
  s         - Pointer to string (RAM)
  size      - Font size scale-up (1=normal size, 2=double size...)
  color     - Font color
  bg_color  - Background color

<b>uint8_t drawTextPGM(uint8_t x, uint8_t y, PGM_P s, uint8_t size, uint16_t color, uint16_t bg_color)</b>
Draw a string from Flash. The return value is the X end postion of the text.
  x         - X postion (left top)
  y         - Y postion (left top)
  s         - Pointer to string (Flash)
  size      - Font size scale-up (1=normal size, 2=double size...)
  color     - Font color
  bg_color  - Background color

<b>uint8_t drawMLText(uint8_t x, uint8_t y, char *s, uint8_t size, uint16_t color, uint16_t bg_color)</b>
Draw a multi-line string (line end = "\n") from RAM. The return value is the X end postion of the text.

  x         - X postion (left top)
  y         - Y postion (left top)
  s         - Pointer to string (RAM)
  size      - Font size scale-up (1=normal size, 2=double size...)
  color     - Font color
  bg_color  - Background color

<b>uint8_t drawMLTextPGM(uint8_t x, uint8_t y, PGM_P s, uint8_t size, uint16_t color, uint16_t bg_color)</b>
Draw  a multi-line string (line end = "\n") from Flash. The return value is the X end postion of the text.
  x         - X postion (left top)
  y         - Y postion (left top)
  s         - Pointer to string (Flash)
  size      - Font size scale-up (1=normal size, 2=double size...)
  color     - Font color
  bg_color  - Background color

<u>Note:</u>
  For colors you can use the <b>RGB(red,green,blue)</b> macro.
  Examples: clear(RGB(255,50,100))
            drawText(10, 10, "Hello world", RGB(0,0,255), RGB(255,50,100))
            drawTextPGM(10, 20, PSTR("Hello world"), RGB(0,255,0), RGB(255,50,100))

  To rotate or mirror the display uncomment the definitions <b>S65_ROTATE</b> or <b>S65_MIRROR</b> in /libraries/S65Display/S65Display.h

  The text functions can draw characters from 0x20 to 0x7F and the default font is 8x12.
  To change the font to 8x8 uncomment the <b>FONT_8X8</b> definition and comment the <b>FONT_8X12</b> definition in /libraries/S65Display/fonts.h
  To support characters from 0x20 to 0xFF comment the <b>FONT_END7F</b> definition in /libraries/S65Display/fonts.h.
  Use Umlaut characters as hex values, for example "Test \x84 \x94 \x81 \x8E \x99 \x9A" to display "Test ä ö ü Ä Ö Ü"
    0x84 = ä
    0x8E = Ä
    0x94 = ö
    0x99 = Ö
    0x81 = ü
    0x9A = Ü
</pre>


<br><h3><u>RotaryEncoder</u></h3>
<pre>
<b>void init(void)</b>
Initialize the microcontroller peripherals.

<b>void service(void)</b>
This function has to be called every 1 millisecond (1000 Hz).

<b>int8_t step(void)</b>
Get the step of the rotary encoder: -1, 0, +1

<b>int8_t sw(void)</b>
Get the state of the switch: 0, SW_PRESSED, SW_PRESSEDLONG
</pre>


<br><h3><u>SDcard</u></h3>
<pre>
<b>void init(uint8_t clock_div)</b>
<>Initialize the microcontroller peripherals.
  clock_div - SPI clock divider (2, 4, 8, 16, 32),  SPI clock = Main clock / clock_div

<b>void service(void)</b>
This function has to be called every 10 milliseconds (100 Hz).

<b>uint8_t mount(void)</b>
Initialize the memory card and mount it.
The return value is 0 if the mounting failed and 1 if the card is mounted successfully.

<b>void unmount(void)</b>
Unmount the memory card.

See also the FatFS Docu, for more information about the file system functions (f_open(), f-opendir()...):
<a href="./libraries/SDcard/doc/00index_e.html">/libraries/SDcard/doc/00index_e.html</a> or <a href="http://elm-chan.org/fsw/ff/00index_e.html">ELM-Chan FatFs website</a><br> 
To enable LFN support (long file names) set <b>_USE_LFN</b> to <b>1</b> in <a href="./libraries/SDcard/ffconf.h">/libraries/SDcard/ffconf.h</a>. The <i>Demo2</i> has also LFN support.
</pre>

</blockquote>


<br>


<h2>Pin map</h2>
<blockquote>
<pre>
  Display          A3 17 - Reset
                   A2 16 - CS
                       4 - RS
                 MOSI 11 - Data
                  SCK 13 - Clk

  Rotary Encoder       5 - Switch
                       6 - PhA
                       7 - PhB

  microSD              8 - Power (low -> power on)
                       9 - CS
                 MISO 12 - MISO
                 MOSI 11 - MOSI
                  SCK 13 - SCK

  wireless         A0 14 - CS
                   A1 15 - CE
                 INT1  3 - DR1
                 MOSI 11 - Data
                  SCK 13 - Clk
</pre>
</blockquote>


<br><br>


</body>
</html>
